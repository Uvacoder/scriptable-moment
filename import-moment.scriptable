{
  "always_run_in_app" : false,
  "icon" : {
    "color" : "deep-green",
    "glyph" : "download"
  },
  "name" : "import-moment",
  "script" : "\/\/ if you move the file, please adjust this, otherwise this script doesn't know where it is\nconst filePath = \"lib\/moment.js\";\n\nconst remoteUrl = \"https:\/\/raw.githubusercontent.com\/schl3ck\/scriptable-moment\/master\/moment-with-locales.min.js\";\nconst changelogUrl = \"https:\/\/github.com\/moment\/moment\/blob\/version\/CHANGELOG.md\";\nlet infoJson = \"https:\/\/raw.githubusercontent.com\/schl3ck\/scriptable-moment\/master\/info.json\";\nconst importScriptUrl = \"https:\/\/raw.githubusercontent.com\/schl3ck\/scriptable-moment\/master\/import-moment.scriptable\";\n\nconst ownVersion = \"0.1\";\n\nconst regexGetVersion = \/^\\\/\\\/ v([\\d.]+)\/;\n\nlet fm;\ntry {\n\tfm = FileManager.iCloud();\n} catch (err) {\n\tfm = FileManager.local();\n}\n\nlet completePath = fm.joinPath(fm.documentsDirectory(), filePath);\n\nlet req = new Request(infoJson);\ninfoJson = await req.loadJSON();\n\nlet newVersion = infoJson.script.version;\n\nif (compVersion(newVersion, ownVersion) > 0) {\n\tloop:\n\twhile (true) {\n\t\tlet a = new Alert();\n\t\ta.title = `New ${Script.name()} version: ${ownVersion} ⇒ ${newVersion}`;\n\t\ta.message = infoJson.script.history.find(h => h.version === newVersion).notes;\n\t\t\n\t\ta.addCancelAction(\"Ignore\");\n\t\ta.addAction(\"Install\");\n\t\ta.addAction(\"View Changelog\");\n\t\t\n\t\tlet res = await a.presentAlert();\n\t\tswitch (res) {\n\t\t\tcase -1: break loop;\n\t\t\tcase 0:\n\t\t\t\tSafari.open(importScriptUrl);\n\t\t\t\treturn;\n\t\t\tcase 1:\n\t\t\t\tlet wv = new WebView();\n\t\t\t\twv.loadHTML(`<html>\n<head>\n<meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"initial-scale=1, width=device-width\">\n<style>\nbody {\n\tfont-family: -apple-system-body;\n}\n<\/style>\n<\/head>\n<body>\n\t${infoJson.script.history.map(h => {\n\t\treturn `<h2>v${h.version} - ${h.date}<\/h2>\n<p>${h.notes}<\/p>`;\n\t}).join(\"\\n\")}\n<\/body>\n<\/html>`);\n\t\t\t\tawait wv.present();\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\nif (fm.fileExists(completePath)) {\n\tlet localFile = fm.readString(completePath);\n\tlet currentVersion = localFile.match(regexGetVersion)[1];\n\n\tnewVersion = infoJson.moment.version;\n\t\n\tif (compVersion(currentVersion, newVersion)) {\n\t\tloop:\n\t\twhile (true) {\n\t\t\tlet a = new Alert();\n\t\t\ta.title = \"New moment.js version found!\";\n\t\t\ta.message = `${currentVersion.join(\".\")} ⇒ ${newVersion.join(\".\")}`;\n\t\t\ta.addCancelAction(\"Don't update\");\n\t\t\ta.addAction(\"Update\");\n\t\t\ta.addAction(\"Show Changelog\");\n\t\t\t\n\t\t\tlet res = await a.presentSheet();\n\t\t\tswitch(res) {\n\t\t\t\tcase -1: return;\n\t\t\t\tcase 0: break loop;\n\t\t\t\tcase 1:\n\t\t\t\t\tawait Safari.openInApp(changelogUrl.replace(\"version\", newVersion));\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tlet a = new Alert();\n\t\ta.title = \"You're up to date!\";\n\t\ta.addCancelAction(\"Great!\");\n\t\ta.presentAlert();\n\t\treturn;\n\t}\n} else {\n\tlet folders = filePath.split('\/');\n\tlet filename = folders.pop();\n\tfolders = fm.joinPath(fm.documentsDirectory(), folders.join('\/'));\n\t\n\tif (!fm.fileExists(folders))\n\t\tfm.createDirectory(folders, true);\n}\n\nreq = new Request(remoteUrl);\nlet remoteFile = await req.loadString();\n\nfm.writeString(completePath, remoteFile);\n\nlet a = new Alert();\na.title = \"Downloaded and saved file to:\";\na.message = filePath;\na.addCancelAction(\"OK\");\na.presentAlert();\n\n\nfunction compVersion(a, b) {\n\ta = a.split(\".\").map(i => parseInt(i));\n\tb = b.split(\".\").map(i => parseInt(i));\n\t\n\twhile (a.length < 3)\n\t\ta.push(0);\n\twhile (b.length < 3)\n\t\tb.push(0);\n\t\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i] < b[i]) return -1;\n\t\tif (a[i] > b[i]) return 1;\n\t}\n\treturn 0;\n}\n\n\n",
  "share_sheet_inputs" : [

  ]
}